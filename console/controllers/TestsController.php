<?php
/**
 * Created by PhpStorm.
 * User: Анастсия
 * Date: 02.12.2018
 * Time: 10:29
 */

namespace console\controllers;

use app\tests\EvaluatorTest;
use common\models\BaseStation;
use common\models\Colors;
use common\models\EstimatesToSmeta;
use common\models\evaluator\EvaluatorBooleanRequest;
use common\models\Regions;
use common\models\Smeta;
use common\models\StationPrices;
use common\models\Table;
use common\models\TableCells;
use common\models\TableHistory;
use common\models\User;
use common\models\Works;
use Yii;
use backend\utils\D;
use common\models\evaluator\Evaluator;
use common\models\evaluator\EvaluatorRequest;

class TestsController extends \yii\console\Controller
{

    public function beforeAction($action)
    {
        \backend\utils\D::$isConsole = true;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionEvaluator()
    {
        D::success(" TESTING EVALUATOR CALCULATIONS ");
        echo $evaluator = Evaluator::make(new EvaluatorRequest('6*7;'));
        echo PHP_EOL;
        D::success(" TESTING EVALUATOR BOOLEAN ");
        echo $evaluator = Evaluator::make(new EvaluatorBooleanRequest('(true) && ($d != 7)', 'if (45 > 1) $d = 7'));
        echo PHP_EOL;
        D::success(" TESTING EVALUATOR BOOLEAN ");
        echo $evaluator = Evaluator::make(new EvaluatorBooleanRequest('(true) && ($d != \'565\')', 'if (45 > 1) $d = 7'));

    }

    public function actionLogDatabase()
    {
        $timestart = time();
        foreach (range(1, 10) as $step) {

            TableHistory::storeNew();

            sleep(2);

        }

        TableHistory::ClearOld();


        D::success("SCRIPTS TAKES " . (time() - $timestart - 20) . " WITH RESPONSE ");


    }

    public function actionLoadWorks()
    {
        $file = "Монтаж в котлован	------	шт.	------		------	
Пусконаладочные работы	------	шт.	------		------	
Монтаж без земляных работ: контроль выполнения земляных работ, погружение станции (с помощью рабочей силы заказчика), подключение электрики, насосного оборудования, вваривание патрубков, монтаж аварийной сигнализации, контроль прокладки труб и ввода в дом**	------	шт.	------		------	
Прокладка канализационной трубы под уклон (ввод в станцию и выброс)              	------	м	------	500	------	150
Монтаж инфильтрационного колодца 1,5 м	------	шт.	------	4 500	------	1000
Монтаж инфильтрационного колодца 2 м	------	шт.	------	5 500	------	1000
Перемещение грунта	------	м*куб м	------	30	------	10
Перемещение песка (расстояние более 20 м)	------	м*куб м	------	30	------	10
Перемещение щебня (расстояние более 20 м)	------	м*куб м	------	30	------	10
Вваривание дополнительного входа в станцию	------	шт.	------	1 500	------	375
Проход деревянного пола	------	шт.	------	1 000	------	250
Проход плитки	------	шт.	------	2 400	------	600
Проход газобетонной стены	------	шт.	------	1 200	------	300
Проход стены из кирпича	------	шт.	------	2 000	------	500
Монтаж ревизии	------	шт.	------	1 000	------	250
Утепление канализационной трубы 	------	м	------	50	------	13
Шурфование	------	шт.	------	2 000	------	500
Перемещение демонтированного бетонного кольца	------	м*шт.	------	30	------	10
Прокладка трубы 25 мм на выброс 	------	м	------	300	------	150
Подкоп под фундамент  	------	шт.	------	2 000	------	500
Переделка (поднятие) вывода	------	шт.	------	4 000	------	2000
Прокладка трубы на выброс с греющим кабелем	------	м	------	300	------	150
Прокладка кабеля в земле, отдельно от основной траншеи	------	м	------	150	------	50
Подрубка корней кл 1 (пни деревьев)	------	шт.	------	2 500	------	2000
Подрубка корней кл 2 (корневая система деревьев)	------	шт.	------	1 500	------	1000
Подрубка корней кл 3 (кустарники)	------	шт.	------	1 000	------	0
Укладка гильзы из трубы асбестоцементной	------	шт.	------	2 000	------	500
Погрузка грунта на самосвал	------	куб м	------	750	------	500
Вывоз и утилизация грунта	------	ходка	------	8 000	------	7000
Подключение кабеля в щиток	------	шт.	------	500	------	125
Работа генератора с учетом доставки и расхода ГСМ	------	день	------		------	
Отводящая канава (глубина 40-50 см)	------	м	------	300	------	100
Демонтаж ж/б кольца колодца без сохранения целостности	------	шт.	------	3 000	------	750
Монтаж КНС 1,5 м	------	шт.	------	4500	------	3625
Монтаж КНС 2 м	------	шт.	------	5500	------	3875
Монтаж КНС 2,5 м	------	шт.	------	8000	------	4500
Монтаж КНС 3 м	------	шт.	------	9500	------	4875
Монтаж сборного колодца 1,5 м	------	шт.	------	4500	------	3625
Монтаж сборного колодца 2 м	------	шт.	------	5500	------	3875
Монтаж сборного колодца 2,5 м	------	шт.	------	8000	------	4500
Монтаж сборного колодца 3 м	------	шт.	------	9500	------	4875
Установка насоса	------	шт.	------	3000	------	750
Сборка и монтаж выносного электрического блока	------	шт.	------	2000	------	500
Проход стенки пластикого колодца	------	шт.	------	400	------	100
Якорение септика (Росток Мини или Дачный)	------	шт.	------	3000	------	2000
Якорение септика (Росток Загородный или Коттеджный)	------	шт.	------	5000	------	2000
Приготовление ЦПС	------	куб м	------	600	------	0
Прокладка ПНД 50 мм от КНС до септика	------	м	------	500	------	150
Прокладка канализационной трубы (подвес)	------	м	------	350	------	88
Монтаж сливного клапана	------	шт.	------	500	------	125
Монтаж скважинного насоса	------	шт.	------	5 000	------	1250
Монтаж скважинного адаптера	------	шт.	------	4 500	------	1125
Прокладка трубы ниже глубины промерзания     	------	м	------	900	------	225
Ввод в дом, монтаж греющего кабеля	------	шт.	------	2 000	------	500
Монтаж поливочного крана из дома 	------	шт.	------	1 950	------	488
Монтаж фильтра	------	шт.	------	1 250	------	313
Монтаж кранов шаровых	------	шт.	------	650	------	163
Установка реле защиты от сухого хода	------	шт.	------	1 850	------	463
Монтаж гидроаккумулятора и подключение автоматики	------	шт.	------	4 000	------	1000
Монтаж насосной станции	------	шт.	------	3 500	------	875
Проход стенки ж/б колодца	------	шт.	------	1 000	------	250
Монтаж колодезного насоса	------	шт.	------	5000	------	1250
Монтаж гидроаккумулятора 	------	шт.	------	2 500	------	625";
        if ($rows = explode("\n", $file)) {
            foreach ($rows as $row) {
                $params = preg_split("/------/", $row);
                //  D::dump($params);
                $work = new Works();
                $work->name = trim($params[0]);
                $work->ei = trim($params[1]);
                $work->cost = preg_replace("/\s/", '', trim($params[2]));
                $work->self_cost = preg_replace("/\s/", '', trim($params[3]));
                D::dump($work->toArray());
                if (!$work->save()) D::dump($work->errors);

            }
        }
        //   D::dump($rows);
    }

    public function actionRestore()
    {
        $tableHistory = TableHistory::findOne(26);
        // TableHistory::storeNew();
        $tableHistory->restore();
    }

    public function actionRenameEi()
    {
        if ($tableCells = TableCells::find()->all()) {
            foreach ($tableCells as $tableCell) {
                if (preg_match("/meisure/", $tableCell->value)) {
                    $tableCell->value = preg_replace("/meisure/", 'ei', $tableCell->value);
                    D::success($tableCell->value);
                    $tableCell->save();
                }
            }
        }

    }

    public function actionGenerateAddresses()
    {
        foreach (TableCells::find()->All() as $cell) {
            $cell->address = $address = $cell->generateAddress();

            D::success(" ADDRESS FOR " . $cell->tr_id . " " . $cell->td_id . " = " . $cell->address);
            if (!$cell->save()) D::dump($cell->errors);

        }
    }

    public function actionTestRows()
    {
        D::success(" WE ARE TESTING ROWS");
        $tableCell = new TableCells();
        $width = 35;

        // $tableCell->value = " Этот текст надо перенести, если что, но можно и не переносить";
        $tableCell->value = "Мой скрипт используется не только на моём локальном сервере, но и на сервере хостинга, а установить что-либо на него мне не представляется возможным.";

        $countChars = strlen($tableCell->value);
        $words = preg_split("/\s/", $tableCell->value);
        $countWords = count($words);
        $sense = [];
        $string = [];
        $countRows = 1;
        foreach ($words as $key => $word) {

            if (mb_strlen(implode(" ", $string) . " " . $word) > $width) {
                D::alert(" LEN  = " . mb_strlen(implode(" ", $string) . " " . $word));
                //  D::primary($string);
                $sense[] = implode(" ", $string);
                $string = [];
                $string[] = $word;
                $countRows++;

            } else {
                $string[] = $word;
            }

        }
        $sense[] = implode(" ", $string);
        // D::dump($sense);
        echo implode("\n", $sense);
        echo "\n";
        D::success(" COUNT CHARS = " . $countChars);
        D::success(" COUNT WORDS = " . $countWords);
        D::success(" COUNT ROWS = " . TableCells::countRows($tableCell->value, $width));

    }

    public function actionGeneratePrices()
    {

        /* @var $station BaseStation */
        /* @var $region Regions */

        $queryStation = BaseStation::find();
        D::success(" LOST  = " . $queryStation->count());
        $queryRegions = Regions::find();
        D::success(" COUNT REGIONS = " . $queryRegions->count());
        $regions = $queryRegions->all();
        foreach ($regions as $region) {
            D::primary(" REGION NAME = " . $region->name);
            if ($stations = $queryStation->limit(5)->all()) {
                foreach ($stations as $station) {
                    D::success(" STATION NAME = " . $station->name);
                    if ($existed = StationPrices::find()->where(['station_id' => $station->id])->andWhere(['region_id' => $region->id])->one()) {
                        D::success(" PRICE FOR THIS STATION AND REGION EXISTS");
                    } else {
                        D::alert(" PRICE FOR THIS STATION AND REGION DOESN'T EXIST");

                    }

                }
            }
        }


    }

    public function actionLoadColors()
    {
        D::$isConsole = true;
        $colors = "000000	000033	000066	000099	0000cc	0000ff
003300	003333	003366	003399	0033cc	0033ff
006600	006633	006666	006699	0066cc	0066ff
009900	009933	009966	009999	0099cc	0099ff
00cc00	00cc33	00cc66	00cc99	00cccc	00ccff
00ff00	00ff33	00ff66	00ff99	00ffcc	00ffff
330000	330033	330066	330099	3300cc	3300ff
333300	333333	333366	333399	3333cc	3333ff
336600	336633	336666	336699	3366cc	3366ff
339900	339933	339966	339999	3399cc	3399ff
33cc00	33cc33	33cc66	33cc99	33cccc	33ccff
33ff00	33ff33	33ff66	33ff99	33ffcc	33ffff
660000	660033	660066	660099	6600cc	6600ff
663300	663333	663366	663399	6633cc	6633ff
666600	666633	666666	666699	6666cc	6666ff
669900	669933	669966	669999	6699cc	6699ff
66cc00	66cc33	66cc66	66cc99	66cccc	66ccff
66ff00	66ff33	66ff66	66ff99	66ffcc	66ffff
990000	990033	990066	990099	9900cc	9900ff
993300	993333	993366	993399	9933cc	9933ff
996600	996633	996666	996699	9966cc	9966ff
999900	999933	999966	999999	9999cc	9999ff
99cc00	99cc33	99cc66	99cc99	99cccc	99ccff
99ff00	99ff33	99ff66	99ff99	99ffcc	99ffff
cc0000	cc0033	cc0066	cc0099	cc00cc	cc00ff
cc3300	cc3333	cc3366	cc3399	cc33cc	cc33ff
cc6600	cc6633	cc6666	cc6699	cc66cc	cc66ff
cc9900	cc9933	cc9966	cc9999	cc99cc	cc99ff
cccc00	cccc33	cccc66	cccc99	cccccc	ccccff
ccff00	ccff33	ccff66	ccff99	ccffcc	ccffff
ff0000	ff0033	ff0066	ff0099	ff00cc	ff00ff
ff3300	ff3333	ff3366	ff3399	ff33cc	ff33ff
ff6600	ff6633	ff6666	ff6699	ff66cc	ff66ff
ff9900	ff9933	ff9966	ff9999	ff99cc	ff99ff
ffcc00	ffcc33	ffcc66	ffcc99	ffcccc	ffccff
ffff00	ffff33	ffff66	ffff99	ffffcc	ffffff";

        if ($rows = explode("\n", $colors)) {
            foreach ($rows as $row) {
                if ($colors = preg_split("/\s/", trim($row))) {
                    foreach ($colors as $color) {
                        D::success(" COLOR  = " . $color);
                        if (trim($color)) {
                            $colors_array[] = $color;
                            $color_new = new Colors();
                            $color_new->hex = strval($color);
                            $color_new->time = time();
                            if (!$color_new->save()) D::dump($color_new->errors);
                        }
                    }
                }

            }
            // D::dump($colors_array);
            echo "'" . implode("','", $colors_array) . "'";
        }

    }

    public function actionTestUser()
    {
        $user = User::find()->one();
        $user->validate();

    }

    public function actionCopySmeta()
    {
        $smeta = Smeta::findOne(3);
        $smeta_id = $smeta->copy();
        $smeta = Smeta::findOne($smeta_id);

    }


}