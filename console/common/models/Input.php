<?php

namespace common\models;

use backend\utils\D;
use Yii;
use yii\helpers\ArrayHelper;


/**
 * This is the model class for table "input".
 *
 * @property int $input_id Данные
 * @property int $estimate_id Смета
 * @property string $name
 * @property int $stage_id Этап
 * @property int $type Тип данных
 * @property int $validation_rule_id Правило валидации
 * @property int $multiple Кол-во значений
 * @property int $required Обязательное поле
 * @property int $with Ширина поля
 * @property int $priority Приоритет
 */
class Input extends \yii\db\ActiveRecord
{


    //  public $required = true;
    const STRING_TYPE = 1;
    const INTEGER_TYPE = 2;
    const FLOAT_TYPE = 3;
    const BOOLEAN_TYPE = 4;
    const IN_ARRAY_TYPE = 5;
    const IN_LIST_BASE_STATION = 6;
    const IN_LIST_MATERIAL = 7;
    const DATE_TYPE = 8;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'input';
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) $this->priority = Input::find()->where(['stage_id' => $this->stage_id])->max('priority') + 1;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function reorderPriority($priority)
    {
        if ($priority == 'up') {
            if ($this->priority != 1) {
                $this->priority = $this->priority - 1;
                $input_down = Input::find()->where(['stage_id' => $this->stage_id])->andWhere(['priority' => $this->priority])->one();
                $input_down->priority = $input_down->priority + 1;

                $input_down->save();
            }

        } elseif ($priority == 'down') {
            $max = Input::find()->where(['stage_id' => $this->stage_id])->max('priority');
            if ($this->priority != $max) {
                $this->priority = $this->priority + 1;
                $input_up = Input::find()->where(['stage_id' => $this->stage_id])->andWhere(['priority' => $this->priority])->one();
                $input_up->priority = $input_up->priority - 1;
                $input_up->save();
            }

        }
        $this->save();


    }

    public
    function mapTypes()
    {
        return [
            self::STRING_TYPE => "Текст",
            self::INTEGER_TYPE => "Целое число",
            self::FLOAT_TYPE => "Нецелое число",
            self::BOOLEAN_TYPE => "Да/нет",
            self::IN_ARRAY_TYPE => "Значение из списка",
            self::IN_LIST_BASE_STATION => "Значение из базы станций",
            self::IN_LIST_MATERIAL => "Значение из базы материалов",
            self::DATE_TYPE => "Быбора даты",
        ];
    }


    public function mapRules()
    {
        return ArrayHelper::map(ValidationRule::find()->all(), 'id', 'name');
    }

    public function mapWidth()
    {
        return [
            5 => '5',
            10 => '10',
            20 => '20',
            50 => '50',
            100 => '100',
            250 => '250',
            1000 => '1000',

        ];
    }

    public function getStage()
    {
        return $this->hasOne(EstimateStage::className(), ['stage_id' => 'stage_id']);
    }

    public function getFormName() {
        return "input[".$this->input_id."]";
    }

    public function getFormID() {
        return "input_id_".$this->input_id;
    }


    public function beforeValidate()
    {

        if (!$this->estimate_id) {
            $stage = EstimateStage::findOne($this->stage_id);
            $this->estimate_id = $stage->estimate_id;
        }
        return parent::beforeValidate();

    }

    public function debugSave()
    {
        if (!$this->save()) {
            $keys = array_keys($this->getErrors());
            foreach ($keys as $key) {
                D::alert($key . "=" . $this->$key);
            }
            D::dump($this->getErrors());
        }
        // $this->save();
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['estimate_id', 'stage_id', 'type', 'validation_rule_id', 'name'], 'required'],
            [['estimate_id', 'stage_id', 'type', 'validation_rule_id', 'multiple', 'required', 'width', 'priority'], 'integer'],
            [['name'], 'string', 'max' => 256]
        ];
    }

    /**
     * {@inheritdoc}
     */

    public function attributeLabels()
    {
        return [
            'input_id' => 'Данные',
            'name' => 'Название',
            'estimate_id' => 'Смета',
            'stage_id' => 'Этап',
            'type' => 'Тип данных',
            'validation_rule_id' => 'Правило валидации',
            'multiple' => 'Может быть несколько',
            'required' => 'Обязательное значение',
            'width' => 'Ширина поля',
            'priority' => 'Порядок',
        ];
    }
}
