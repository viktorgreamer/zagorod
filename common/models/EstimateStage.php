<?php

namespace common\models;

use backend\utils\D;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "estimate_stage".
 *
 * @property int $stage_id Этап
 * @property string $name Наименование
 * @property int $estimate_id Смета
 * @property int $priority Приоритет
 * @property int $status Статус
 * @property int $event_id Событие
 * @property int $inInput Ввод данных
 * @property int $inOutput Вывод данных
 */
class EstimateStage extends \yii\db\ActiveRecord
{

    const  STATUS_ACTIVE = 1;
    const  STATUS_DISACTIVE = 0;

    const TYPE_INPUT = 1;
    const TYPE_OUTPUT = 2;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'estimate_stage';
    }

    public function mapStatuses() {
        return [
            self::STATUS_DISACTIVE => 'нет',
            self::STATUS_ACTIVE => 'да'
        ];
    }

    public function mapEvents()
    {
        return ArrayHelper::map(Events::find()->where(['estimate_id' => $this->estimate_id])->all(), 'event_id', 'name');
    }


    public function beforeSave($insert)
    {
        if (!$this->priority) $this->priority = EstimateStage::find()->where(['estimate_id' => $this->estimate_id])->andWhere(['status' => EstimateStage::STATUS_ACTIVE])->max('priority') + 1;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function reorderPriority($priority)
    {
        echo $this->priority;
        if ($priority == 'up') {

            if ($this->priority != 1) {
                $this->priority = $this->priority - 1;
                $input_down = EstimateStage::find()->where(['estimate_id' => $this->estimate_id])->andWhere(['type' => $this->type])->andWhere(['priority' => $this->priority])->one();
                $input_down->priority = $input_down->priority + 1;

                $input_down->save();
            }

        } elseif ($priority == 'down') {
            $max = EstimateStage::find()->where(['estimate_id' => $this->estimate_id])->max('priority');
            if ($this->priority != $max) {
                $this->priority = $this->priority + 1;
                $input_up = EstimateStage::find()->where(['estimate_id' => $this->estimate_id])->andWhere(['type' => $this->type])->andWhere(['priority' => $this->priority])->one();
                $input_up->priority = $input_up->priority - 1;
                $input_up->save();
            }

        }
        $this->save();


    }


    public function getEstimate()
    {
        return $this->hasOne(Estimate::className(), ['estimate_id' => 'estimate_id']);
    }

    public function getInputs()
    {
        return $this->hasMany(Input::className(), ['stage_id' => 'stage_id'])->orderBy('priority');
    }


    public function getOutputs()
    {
        return $this->hasMany(Output::className(), ['stage_id' => 'stage_id'])->orderBy('priority');
    }

    public function debugSave()
    {
        if (!$this->save()) {
            $keys = array_keys($this->getErrors());
            foreach ($keys as $key) {
                D::alert($key . "=" . $this->$key);
            }
            D::dump($this->getErrors());
        }
        // $this->save();
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'estimate_id'], 'required'],
            [['stage_id', 'status', 'estimate_id', 'priority','inInput','inOutput'], 'integer'],
            [['name'], 'string'],
        ];
    }

    public function afterDelete()
    {
        $this->resetPriority();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function resetPriority()
    {
        $inputs = EstimateStage::find()
            ->where(['estimate_id' => $this->estimate_id])
            ->select('stage_id,priority')
            ->orderBy('priority')
            // ->indexBy('input_id')
            // ->asArray()
            ->all();

        foreach ($inputs as $key => $input) {
            $input->priority = ($key + 1);
            $input->update(false);
        }

    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'stage_id' => 'Этап',
            'name' => 'Название',
            'estimate_id' => 'Смета',
            'priority' => 'Приоритет',
            'status' => 'Статус',
            'event_id' => 'Событие',
            'type' => 'Тип',
            'inInput' => 'Ввод данных',
            'inOutput' => 'Вывод данных',
        ];
    }

    public static function find()
    {
        return (new EstimateStageQuery(get_called_class()))->orderBy('priority');
    }
}
