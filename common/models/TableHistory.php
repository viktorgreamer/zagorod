<?php

namespace common\models;

use backend\utils\D;
use Yii;

/**
 * This is the model class for table "history".
 *
 * @property int $id
 * @property int $time
 * @property string $name
 * @property int $status
 */
class TableHistory extends \yii\db\ActiveRecord
{
    const STATUS_ACTIVE = 1;
    const STATUS_TO_DELETE = 2;
    const COUNT_SAVED_TABLES_IN_HISTORY = 5;

    public static $tables = ['table_cells', 'table_rows', 'table_columns'];

    /**
     * {@inheritdoc}
     */

    public static function tableName()
    {
        return 'history';
    }

    public static function ClearOld()
    {
        if ($tables = TableHistory::find()->orderBy(['time' => SORT_DESC])->all()) {
            foreach ($tables as $key => $table) {
                if (($key + 1) > self::COUNT_SAVED_TABLES_IN_HISTORY) {
                    $table->delete();
                }
            }
        }
    }

    public function getRelativeTime()
    {
        return Yii::$app->formatter->asRelativeTime($this->time);
    }

    public static function Last($limit = 10)
    {
        return TableHistory::find()->orderBy(['time' => SORT_DESC])->limit($limit)->all();
    }

    public static function LastJson($limit = 10)
    {
        $response = [];
        if ($tables = TableHistory::find()->orderBy(['time' => SORT_DESC])->limit($limit)->all()) {
            foreach ($tables as $table) {
                $response[] = ['time' => $table->relativeTime, 'id' => $table->id];
            }
            return $response;
        }
    }

    public function store()
    {
        foreach (TableHistory::$tables as $table) {
            D::success(" TABLE IS " . $table);
            $new_table_name = $table . "_" . $this->time;
            D::primary("NEW TABLE NAME IS " . $new_table_name);
            //  Yii::$app->db->createCommand('')->execute();
            /*  $query = "DROP TABLE  IF EXISTS `table_".$item."_history_3`;
          RENAME TABLE `table_".$item."_history_2` TO `table_cells_history_3`;
          RENAME TABLE `table_".$item."_history_1` TO `table_".$item."_history_2`;
          CREATE TABLE  `table_".$item."_history_1` LIKE `table_".$item."`;
          INSERT `table_".$item."_history_1` SELECT * FROM  `table_".$item."`;";*/

            $query = "DROP TABLE  IF EXISTS `" . $new_table_name . "`; CREATE TABLE  `" . $new_table_name . "` LIKE `" . $table . "`;
                 INSERT `" . $new_table_name . "` SELECT * FROM  `" . $table . "`;";

            //echo $query;
            $response = Yii::$app->db->createCommand($query)->execute();

        }
    }

    public static function storeNew($name = '')
    {
        $tableHistory = new TableHistory();
        $current_time = time();
        if (!$name) $tableHistory->name = date('d.m.y h:i A');
        else $tableHistory->name = $name;
        $tableHistory->time = $current_time;
        $tableHistory->status = TableHistory::STATUS_ACTIVE;
        if ($tableHistory->save()) {
            TableHistory::ClearOld();
            $tableHistory->store();
            return ['name' => $tableHistory->name, 'time' => Yii::$app->formatter->asRelativeTime($tableHistory->time), 'id' => $tableHistory->id];
        }
    }

    public function getTimeText()
    {
        return Yii::$app->formatter->asRelativeTime($this->time);
    }

    public function restore($name = '')
    {

        self::storeNew($name);

        foreach (self::$tables as $table) {
            $tablename = $table . "_" . $this->time;

            D::alert(" DELETE TABLE " . $table);
            $query = "DROP TABLE  IF EXISTS `" . $table . "`;";
            $query .= "CREATE TABLE  `" . $table . "` LIKE `" . $tablename . "`; 
            INSERT `" . $table . "` SELECT * FROM  `" . $tablename . "`;";

            $response = Yii::$app->db->createCommand($query)->execute();


        }


    }

    public function beforeDelete()
    {
        foreach (self::$tables as $table) {
            $tablename = $table . "_" . $this->time;

            $query = "DROP TABLE IF EXISTS `" . $tablename . "`;";

            $response = Yii::$app->db->createCommand($query)->execute();
            D::alert(" DELETE TABLE " . $tablename . " SUCCESSFULLY");

        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub

    }


    public static function Generate()
    {

    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['time', 'name', 'status'], 'required'],
            [['time', 'status'], 'integer'],
            [['name'], 'string', 'max' => 256],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'time' => 'Time',
            'name' => 'Name',
            'status' => 'Status',
        ];
    }
}
