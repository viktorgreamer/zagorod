<?php

namespace common\models;

use backend\utils\D;
use Yii;
use yii\helpers\ArrayHelper;


/**
 * This is the model class for table "input".
 *
 * @property int $input_id Данные
 * @property int $estimate_id Смета
 * @property string $name
 * @property int $stage_id Этап
 * @property int $type Тип данных
 * @property int $validation_rule_id Правило валидации
 * @property int $multiple Кол-во значений
 * @property int $required Обязательное поле
 * @property int $width Ширина поля
 * @property int $priority Приоритет
 * @property int $event_id событие
 * @property string $list Выбор из списка
 * @property string $is_newline C новой строки
 */
class Input extends \yii\db\ActiveRecord
{

    public function renderMultipleInput() {
        if ($this->list) {
            if ($rows = explode("\n",$this->list)) {
                foreach ($rows as $row) {
                    if ($fields = explode(":",$row)) {
                        foreach ($fields as $field) {
                            if ($name_value = preg_split("/=/",$field)) {
                                $data_row[$name_value[0]] = $name_value[1];
                            }

                        }
                    }
                    $data[] = $data_row;
                }
            }

        }
        return $data;
    }

    public function getFormulaLink()
    {
        return $this->getFormulaName() . " =" . $this->stage->name . "->" . $this->name;
    }

    public function getExtendedName()
    {
        return "- " . $this->getFormulaName() . " - " . $this->stage->name . " - " . $this->name . " - " . $this->mapTypes()[$this->type];
    }

    public function loadMultipleFields($multiple_inputs)
    {

        foreach ($multiple_inputs as $multiple_input) {
            $field = [];
            if ($multiple_input['name']) {
                $field[] = "name=" . $multiple_input['name'];
                $field[] = "title=" . $multiple_input['title'];
                if ($multiple_input['type'] == 'dropDownList') {
                    $field[] = "type=dropDownList";
                    if ($multiple_input['items']) {
                        $field[] = 'items=' . $multiple_input['items'];
                    }

                } else {
                    if ($multiple_input['rule']) {
                        $field[] = 'rule=' . $multiple_input['rule'];
                    }
                }
                $rows[] = implode(":", $field);
            }

        }
        $this->list = implode(PHP_EOL, $rows);
        $this->update(false);

    }


    public function renderItems($list)
    {
        if (preg_match("/,/", $list)) {
            $list = explode(",", $list);
            foreach ($list as $item) {
                if ($item == '') $items[$item] = 'Не выбрано';
                else  $items[$item] = $item;
            }
            return $items;
        } else {
            return [$list => $list];
        }
    }

    public function copyToOutput()
    {
        $output = new Output(
            [
                'stage_id' => $this->stage_id,
                'formula' => $this->getFormulaName(),
                'type' => $this->type,
                'name' => $this->name,
                'variables' => $this->getFormulaLink() . "\n\r",
            ]);

        if (!$output->save()) D::dump($output->errors);
    }

    public function getFormID()
    {
        return "input_" . $this->input_id . "_";
    }


    public static $formulaName = 'input_{id}_';
    public static $pattern = '/input_(\d+)_/';

    public function getFormulaName()
    {
        return preg_replace("/{id}/", $this->input_id, self::$formulaName);
    }

    public function getValidationRule()
    {
        return $this->hasOne(ValidationRule::className(), ['id' => 'validation_rule_id']);
    }


    //  public $required = true;
    const STRING_TYPE = 1;
    const INTEGER_TYPE = 2;
    const FLOAT_TYPE = 3;
    const BOOLEAN_TYPE = 4;
    const IN_ARRAY_TYPE = 5;
    const IN_LIST_BASE_STATION = 6;
    const IN_LIST_MATERIAL = 7;
    const DATE_TYPE = 8;
    const IN_LIST_OF_MANAGERS = 9;
    const HEADER_1 = 10;
    const IN_LIST_OF_CITIES = 11;
    const GROUP_INPUT = 12;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'input';
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) $this->priority = Input::find()->where(['stage_id' => $this->stage_id])->max('priority') + 1;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $this->resetPriority();
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public function resetPriority()
    {
        $inputs = Input::find()
            ->where(['stage_id' => $this->stage_id])
            ->select('input_id,priority')
            ->orderBy('priority')
            // ->indexBy('input_id')
            // ->asArray()
            ->all();

        foreach ($inputs as $key => $input) {
            $input->priority = ($key + 1);
            $input->update(false);
        }

    }


    public function reorderPriority($priority)
    {
        if ($priority == 'up') {
            if ($this->priority != 1) {
                $this->priority = $this->priority - 1;
                $input_down = Input::find()->where(['stage_id' => $this->stage_id])->andWhere(['priority' => $this->priority])->one();
                $input_down->priority = $input_down->priority + 1;

                $input_down->save();
            }

        } elseif ($priority == 'down') {
            $max = Input::find()->where(['stage_id' => $this->stage_id])->max('priority');
            if ($this->priority != $max) {
                $this->priority = $this->priority + 1;
                $input_up = Input::find()->where(['stage_id' => $this->stage_id])->andWhere(['priority' => $this->priority])->one();
                $input_up->priority = $input_up->priority - 1;
                $input_up->save();
            }

        }
        $this->save();


    }

    public function getControls()
    {
        return $this->hasMany(InputControls::className(), ['input_id' => 'input_id']);
    }

    public function getColumnsSchema($forWidget = true)
    {
        // $template = "name=user:type=dropDownList:items=Один,Два:title=Пользователь|name=priority:title=Приоритет";
        $template = $this->list;
        // расшифровка закодированных параметров
        if ($names = explode(PHP_EOL, $template)) {
            foreach ($names as $key => $name) {
                $key = trim($key);
                if ($params = explode(":", $name)) {
                    foreach ($params as $param) {
                        $array = [];
                        if ($options = explode("=", $param)) {
                            if ($forWidget) {
                                if (in_array($options[0], ['name', 'type', 'items', 'title'])) {
                                    if (preg_match("/,/", $options[1])) {
                                        foreach (explode(",", $options[1]) as $item) {
                                            $item = trim($item);
                                            $array[$item] = $item;
                                        }
                                        $columns[$key][$options[0]] = $array;
                                        //  $columns[$key]['data'] =
                                    } else {
                                        $columns[$key][$options[0]] = trim($options[1]);
                                    }
                                }
                            } else {
                                if (preg_match("/,/", $options[1])) {
                                    foreach (explode(",", $options[1]) as $item) {
                                        $array[$item] = $item;
                                    }
                                    $columns[$key][$options[0]] = $array;
                                    //  $columns[$key]['data'] =
                                } else {
                                    $columns[$key][$options[0]] = trim($options[1]);
                                }
                            }


                        }
                    }
                }

            }

        }
        return $columns;
    }


    public function getGroupValue($value)
    {


        if ($value) {
            if (preg_match('/\{.+\}/', $value)) {

                return unserialize($value);

            } else return [];

        } else return '';

    }

    public
    function mapTypes()
    {
        return [
            self::STRING_TYPE => "Текст",
            self::INTEGER_TYPE => "Целое число",
            self::FLOAT_TYPE => "Нецелое число",
            self::BOOLEAN_TYPE => "Да/нет",
            self::IN_ARRAY_TYPE => "Значение из списка",
            self::IN_LIST_BASE_STATION => "Значение из базы станций",
            self::IN_LIST_MATERIAL => "Значение из базы материалов",
            self::DATE_TYPE => "Выбор даты",
            self::IN_LIST_OF_MANAGERS => "Выбор менеджера",
            self::IN_LIST_OF_CITIES => "Ближайший населенный пункт",
            self::HEADER_1 => "Подзаголовок",
            self::GROUP_INPUT => "Множественная группа ввода",
        ];
    }


    public function mapRules()
    {
        return ArrayHelper::map(ValidationRule::find()->all(), 'id', 'name');
    }

    public function mapWidth()
    {
        return [
            20 => '20',
            5 => '5',
            10 => '10',
            50 => '50',
            100 => '100',
            250 => '250',
            1000 => '1000',

        ];
    }

    public function mapWidthBootstrap()
    {
        return [
            20 => 'col-lg-3',
            5 => 'col-lg-1',
            10 => 'col-lg-2',
            50 => 'col-lg-6',
            100 => 'col-lg-9',
            250 => 'col-lg-12',
            1000 => 'col-lg-12',

        ];
    }


    public function getColClass()
    {

        return $this->mapWidthBootstrap()[$this->width];
    }

    public function getStage()
    {
        return $this->hasOne(EstimateStage::className(), ['stage_id' => 'stage_id']);
    }

    public function getFormName()
    {
        return "input_" . $this->input_id . "_";
    }


    public function beforeValidate()
    {

        if (!$this->estimate_id) {
            $stage = EstimateStage::findOne($this->stage_id);
            $this->estimate_id = $stage->estimate_id;
        }
        return parent::beforeValidate();

    }

    public function debugSave()
    {
        if (!$this->save()) {
            $keys = array_keys($this->getErrors());
            foreach ($keys as $key) {
                D::alert($key . "=" . $this->$key);
            }
            D::dump($this->getErrors());
        }
        // $this->save();
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['estimate_id', 'stage_id', 'type', 'name'], 'required'],
            [['estimate_id', 'stage_id', 'type', 'event_id', 'validation_rule_id', 'multiple', 'required', 'width', 'priority', 'is_newline'], 'integer'],
            [['name', 'list'], 'string', 'max' => 256]
        ];
    }

    /**
     * {@inheritdoc}
     */

    public function attributeLabels()
    {
        return [
            'input_id' => 'Данные',
            'name' => 'Название',
            'estimate_id' => 'Смета',
            'stage_id' => 'Этап',
            'type' => 'Тип данных',
            'validation_rule_id' => 'Правило валидации',
            'multiple' => 'Может быть несколько',
            'required' => 'Обязательное значение',
            'width' => 'Ширина поля',
            'priority' => 'Порядок',
            'event_id' => 'Событие',
            'list' => 'Выбор из списка',
            'is_newline' => 'C новой строки',
        ];
    }

    public function attributeLabelsForFormula()
    {
        return [
            'input_id' => 'Данные',
        ];
    }


}
